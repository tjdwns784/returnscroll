<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="chat">

	<!-- 채팅방 리스트 만들기 -->
	<select id="selectAllRoom" resultType="map"> 
		SELECT roomId AS ID, roomName AS NAME
		FROM chatroom
	</select>

	<!-- 채팅방 리스트랑 현재 접속자 수 불러오도록 -->
	<select id="selectRoom" resultType="map">
		SELECT cr.roomId AS ID, cr.roomName AS NAME, COUNT(*) AS people
		FROM chatroom cr, chatuser cu 
		WHERE cr.roomId = cu.chatRoomId
		GROUP BY cr.roomId;
	</select>
	
	<select id="roomIn" parameterType="_int" resultType="map">
		SELECT roomId, roomName, roomKing, roomDate
		FROM chatroom
		WHERE roomId = #{value}
	</select>
	
	<insert id="createRoom" parameterType="map">
		INSERT INTO chatroom
		(roomId, roomName, roomKing, roomDate)
		VALUES
		(NULL, #{roomName}, #{createUser},NOW())
	</insert>
	
	<select id="roomNumber" parameterType="map" resultType="string">
		SELECT roomId
		FROM chatroom
		WHERE roomName = #{roomName} AND roomKing = #{createUser}
	</select>
	
	<insert id="addUser" parameterType="map">
		INSERT INTO chatuser
		(chatUserId, chatRoomId,joinDate)
		VALUES
		(#{uid}, #{roomId},NOW())
	</insert>
	
	<select id="roomMember" parameterType="_int" resultType="map">
		SELECT ch.chatUserId AS uid, ch.chatRoomId AS roomId, u.nick AS nick
		FROM chatuser ch, users u
		WHERE ch.chatRoomId = #{value} AND ch.chatUserId = u.uid;
	</select>
	
	<select id="addFriend" parameterType="string" resultType="map">
      SELECT sender, recipient, confirmation
      FROM friendadd
      WHERE recipient = #{value} AND confirmation = 0
   </select>
   
   <update id="accept" parameterType="map">
      UPDATE friendadd SET confirmation = 1
      WHERE sender = #{sender} AND recipient = #{recipient}
   </update>
   
   <!-- 회원의 친구리스트를 불러옴 -->
   <select id="friendListCheck" parameterType="string" resultType="map">
      SELECT no, userId, friendId
      FROM friendlist
      WHERE userId=#{value}
   </select>
   
   <!-- 친구신청 보낸사람의 친구리스트가 비어있을 때 새로 생성 -->
   <insert id="newFriendList" parameterType="map">
   <![CDATA[
      INSERT INTO friendlist (no, userId ,friendId)
      VALUES (NULL , #{sender}, #{recipient});
      
      INSERT INTO friendlist (no, userId ,friendId)
      VALUES (NULL , #{recipient}, #{sender} );
   ]]>
   </insert>
	
	<select id="friendList" parameterType="String" resultType="map">
		SELECT f.friendId AS friendId, u.nick AS nick
		FROM friendlist f, users u
		WHERE f.userId = #{value} AND f.friendId = u.uid
	</select>
	
	<delete id="deleteFriend" parameterType="map">
		DELETE FROM friendlist WHERE userId = #{userId} AND friendId = #{friendId}
	</delete>
	
	<insert id="roomInvite" parameterType="map">
		INSERT INTO chatinvite (roomNumber, sender, recipient, confirm)
		VALUES (#{roomNumber},#{sender},#{recipient},0)
	</insert>
	
	<select id="inviteList" parameterType="string" resultType="map">
		SELECT roomNumber AS num, sender AS s, recipient AS r, confirm
		FROM chatinvite WHERE recipient = #{value} AND confirm = 0
	</select>
	
	<update id="roomInviteCheck" parameterType="map">
		UPDATE chatinvite SET confirm = 1
		WHERE roomNumber = #{roomNumber} AND sender = #{sender} AND recipient = #{recipient}
	</update>
	
</mapper>